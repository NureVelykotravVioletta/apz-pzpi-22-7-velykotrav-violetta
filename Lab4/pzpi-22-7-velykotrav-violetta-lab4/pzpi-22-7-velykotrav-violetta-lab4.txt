ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ



Кафедра програмної інженерії







Звіт
з лаборатороної роботи №4
з дисципліни «Архітектура програмного забезпечення»
на тему «РОЗРОБКА ПРОГРАМНОЇ АРХІТЕКТУРИ, СТВОРЕННЯ ТА 13 ВІДЛАГОДЖЕННЯ ПРОГРАМНОГО КОДУ СЕРВЕРНОЇ ЧАСТИНИ ПРОГРАМНОЇ СИСТЕМИ»






 
Виконала:
ст. гр. ПЗПІ-22-7
Великотрав В. Ю.

Перевірив:
ст. викл. каф. ПІ
Сокорчук І. П.
 

 




Харків 2025 
1 Історія змін

№	Дата	Версія звіту	Опис змін та виправлень
1	06.06.2025	0.1	Створення роботи


2 ЗАВДАННЯ
1.	Проаналізуйте завдання (додаток В). 
2.	Виконайте контрольні завдання п. 4.6. 
3.	Дайте відповідь на контрольні запитання п.4.7. 
4.	Відкрийте створений на попередній лабораторній роботі репозиторій GitHub. 
5.	Створіть у репозиторії директорію Task4 та текстовий файл з описом інженерних рішень у  цій частині проєкту, як вказано у додатку З 
6.	Зафіксуйте кожну внесену зміну командою git commit з відповідним коментарем та фіксуйте цією командою усі наступні зміни у проєкті. 
7.	Створіть у директорії Task4 піддиректорію для програмного коду, як вказано у додатку З  
8.	Створіть програмний код, завантажте його у створену піддиректорію, зафіксуйте внесені у репозиторій зміни 
9.	Виконайте функціональне тестування створеного програмного коду та створіть відеозапис цього тестування тривалістю 7..10 хвилин з усними поясненнями процесу тестування 
10.	Завантажте створений відеозапис тестування YouTube канал для вашого облікового запису в домені @nure.ua  
11.	Створіть для завантаженого запису його хронологічний опис. 
12.	Оформіть звіт у форматі pdf та завантажте його на навчальну платформу https://dl.nure.ua/ 
13.	У коментарях до завантаженого звіту вкажіть посилання на відеозапис тестування у вашому каналі YouTube.
3 ОПИС ВИКОНАНОЇ РОБОТИ

3.1 ОПИС АРХІТЕКТУРИ СИСТЕМИ

Клієнтська частина системи «Water Tracker» побудована на основі бібліотеки React.js з використанням підходу SPA (Single Page Application), що забезпечує зручну та швидку взаємодію з користувачем без потреби оновлювати сторінку при кожній дії. Вся логіка інтерфейсу поділена на окремі компоненти, кожен з яких відповідає за свій фрагмент функціональності, як-от: авторизація, відображення панелі користувача, календар, редагування профілю, прогрес-бар тощо.
Взаємодія з сервером відбувається за допомогою бібліотеки axios, яка інкапсулює HTTP-запити, додає токени авторизації до заголовків і дозволяє ефективно працювати з асинхронними операціями. Всі дані, які потребують захищеного доступу, передаються через JWT-токени, що зберігаються в браузері. Це дозволяє реалізувати систему приватних маршрутів — користувач не може потрапити на основну частину сайту без проходження автентифікації.
Кожен логічний блок функціоналу винесено у відповідний модуль або компонент. Наприклад, окремий модуль відповідає за авторизацію та реєстрацію (обробка форм, відправка даних, збереження токена), інший — за керування профілем користувача (редагування імені, пошти, пароля, статі та фото). Модуль відстеження споживання води дозволяє додавати, редагувати та видаляти записи, а також встановлювати або розраховувати денну норму вживання води.
Важливою частиною системи є календар, який дає змогу користувачу переглядати історію вживання води за будь-який день конкретного місяця. Це реалізовано через спеціальний компонент, який отримує дані з сервера за вибраною датою та візуалізує їх. Усі запити до бекенду реалізуються централізовано через API-клієнт, що спрощує обробку помилок і повторне використання запитів.
Крім цього, система має адаптивний дизайн, що забезпечує коректну роботу на різних пристроях, включно зі смартфонами. Валідація форм відбувається на рівні інтерфейсу, що підвищує зручність для користувача. Загалом архітектура фронтенду побудована з урахуванням принципів модульності, повторного використання коду та зручності розширення, що робить систему масштабованою та підтримуваною.

3.2  ПОБУДОВА UML ДІАГРАМИ ПРЕЦЕДЕНТІВ (Use Case Diagram)

У межах лабораторної роботи було побудовано діаграму прецедентів для вебсистеми моніторингу споживання води. 
В якості єдиного актора на діаграмі виступає Користувач. Це фізична особа, яка взаємодіє з вебінтерфейсом через браузер і здійснює вхід до системи, додає або переглядає власні записи, редагує їх тощо. Актор розміщується за межами системи й пов’язується з відповідними прецедентами асоціативними зв’язками.
У системі були виділені наступні основні прецеденти (сценарії використання), кожен з яких відповідає певному виду функціональної активності користувача:
•	Реєстрація в системі – створення нового облікового запису шляхом введення особистих даних.
•	Вхід до системи – автентифікація за допомогою електронної пошти та пароля.
•	Додавання запису споживання води – внесення даних про кількість випитої води.
•	Вихід із системи – завершення сесії користувача.
•	Перегляд конкретного запису 
•	Редагування запису про споживання води
•	Завантаження/зміна фото профілю
•	Перегляд усіх записів про споживання води
•	Перегляд інформації про профіль користувача
•	Оновлення інформаціх профілю користувача
•	Перегляд статистики споживання води за рік/місяць

Усі прецеденти розміщено всередині системної області, яка позначає межі інформаційної системи. Вони пов’язані з актором через прямі асоціативні зв’язки. 
На рисунку Б.1 у додатку Б наведена UML діаграма прецедентів.

3.3 ПОБУДОВА UML ДІАГРАМИ КОМПОНЕНТ (Component Diagram)

Діаграма компонент відображає основні логічні частини системи, які відповідають за окремі функціональні блоки клієнтської частини «Water Tracker». Кожен компонент є незалежним модулем із визначеною відповідальністю, який взаємодіє з іншими компонентами через чітко задані інтерфейси.
У центрі системи знаходиться компонент API Client, який інкапсулює всі HTTP-запити до бекенд-сервера. Через цей компонент відбувається обробка асинхронних запитів, включно з додаванням JWT-токенів для авторизації, що забезпечує захищений доступ до даних.
Компонент Authentication відповідає за процеси реєстрації, логіну та управління сесією користувача. Він тісно взаємодіє з API Client для обміну інформацією з сервером, наприклад, отримання токенів або валідація облікових даних.
Компонент User Profile управляє даними користувача, включаючи редагування особистої інформації (ім’я, пошта, стать, пароль) і завантаження фотографії профілю. Для збереження і отримання даних цей компонент також використовує API Client.
Компонент Water Consumption реалізує функціонал додавання, редагування, видалення та перегляду записів про споживання води. Він співпрацює з API Client для синхронізації даних з сервером.
Компонент Calendar надає користувачу можливість переглядати записи споживання води за конкретні дні певного місяця і року. Для отримання потрібних даних він також звертається до API Client.
Компонент Progress Bar відображає візуальний індикатор, який показує, скільки відсотків від денної норми води вже було випито. Цей компонент отримує інформацію безпосередньо від компонента Water Consumption.
Окремо виділено компонент Routing, який відповідає за навігацію між різними частинами SPA (реєстрація, профіль, календар, додавання записів). Він координує завантаження відповідних компонентів залежно від маршруту і стану авторизації.
Усі компоненти взаємодіють між собою через визначені інтерфейси та за допомогою API Client, що забезпечує централізовану і стандартизовану комунікацію з бекендом. Така архітектура забезпечує високу модульність, зручність тестування та розширюваність системи.
На рисунку Б.2 у додатку Б наведена UML діаграма компонент.

3.4 ПОБУДОВА UML ДІАГРАМИ ДІЯЛЬНОСТІ (Activity Diagram)

Побудова діаграми діяльності системи для обліку споживання води передбачає деталізоване відображення всіх основних дій, які може виконувати користувач у межах платформи, а також логіки переходів між цими діями. Ця діаграма охоплює як взаємодію з системою у процесі автентифікації, так і подальші функціональні можливості, пов’язані з персональним обліком води.
Процес починається з дії «Запуск програми», після чого користувач має змогу обрати один із двох сценаріїв: «Реєстрація» або «Вхід до системи». У разі реєстрації система запитує персональні дані користувача: ім’я, електронну пошту, пароль, а також бажану добову норму споживання води. Після успішної реєстрації користувач автоматично переходить до авторизованої сесії.
У сценарії входу користувач вводить облікові дані — електронну пошту та пароль. У разі успішної авторизації створюється сесія, а користувач отримує доступ до головного функціоналу.
Усередині авторизованої частини система надає кілька варіантів дій. Користувач може переглядати та оновлювати свою персональну інформацію, включно з можливістю змінити ім’я, email, завантажити фотографію або скоригувати добову норму води.
Окремий блок дій стосується обліку води. Користувач може створювати нові записи про споживання води, вказуючи кількість у мілілітрах. Усі ці записи можна переглядати в загальному списку, відфільтровувати за місяцем і роком, переглядати деталі окремого запису, оновлювати або видаляти будь-який із них.
Завершується діаграма діяльності можливістю «Вихід із системи», що передбачає завершення сесії користувача і повернення до стартового екрану з вибором між реєстрацією та входом.
Таким чином, діаграма діяльності демонструє логічну послідовність взаємодії користувача з усіма доступними функціями системи, а також забезпечує цілісне бачення архітектури користувацьких сценаріїв — від входу в систему до повного управління своїм профілем і даними про споживання води.
На рисунку Б.3 у додатку Б наведена діаграма діяльності.

3.5 ПОБУДОВА UML ДІАГРАМИ СТАНІВ (State Diagram)

У системі відстеження споживання води користувач розпочинає свою взаємодію з інтерфейсом у стані «Неавторизований». Це початковий стан, у якому користувач ще не виконав жодної дії, окрім відкриття застосунку. У цьому стані йому доступні два можливі варіанти переходу: реєстрація або авторизація.
Якщо користувач ще не має облікового запису, він обирає шлях реєстрації. У результаті він переходить у стан «Реєстрація», де вводить необхідні персональні дані — ім’я, адресу електронної пошти, пароль та інші відомості. Після успішної обробки введених даних система створює новий обліковий запис, і користувач автоматично переходить у стан «Авторизований».
У випадку, коли користувач уже має обліковий запис, він переходить у стан «Авторизація», де вводить свої облікові дані для входу. Якщо введені дані вірні, система підтверджує автентичність і переводить користувача у стан «Авторизований». У разі помилки автентифікації (наприклад, неправильна пошта або пароль) користувач повертається до стану «Неавторизований» для повторної спроби.
Опинившись у стані «Авторизований», користувач отримує доступ до повного функціоналу застосунку. Він може редагувати свій профіль (змінювати ім’я, email, пароль, завантажувати фото, вказувати стать), переходячи в підстани «Редагування профілю» і повертатися назад до авторизованого стану після завершення редагування.
Також у цьому стані користувач може додавати денну норму води або скористатися функцією автоматичного розрахунку норми на основі введених параметрів. У цьому випадку він тимчасово переходить до стану «Налаштування норми води», а після збереження даних — знову перебуває в загальному стані авторизації.
Крім того, користувач може взаємодіяти з модулем записів: додавати нові записи про вживання води, редагувати наявні, переглядати історію у вигляді календаря або статистики. Умовно ці дії розгортаються у підстани типу «Додавання запису», «Редагування запису» або «Перегляд історії», після завершення яких користувач знову повертається до головного авторизованого стану.
Завершується життєвий цикл взаємодії користувача з системою у стані «Вихід». Коли користувач натискає кнопку «Вийти», система очищає сесію, видаляє токен авторизації з локального сховища, і користувач повертається у початковий стан «Неавторизований».
Таким чином, цикл користувача в системі відображає зміну станів залежно від виконаних дій, де кожен стан тісно пов’язаний з конкретною функціональністю, а переходи між ними регулюються як взаємодією користувача, так і відповідями системи на його дії.

ВИСНОВКИ 

У ході виконання лабораторної роботи було спроєктовано систему для відстеження споживання води з використанням UML-діаграм. Створення діаграм прецедентів, компонент, діяльності та станів дозволило глибше зрозуміти функціональність, структуру та логіку роботи застосунку. Це дало змогу чітко визначити ролі компонентів, взаємодію користувача із системою та її поведінку в різних станах. Виконана робота підтвердила важливість попереднього моделювання для ефективної розробки програмного забезпечення. 
ДОДАТОК А

Відеозапис презентації результатів лабораторної роботи: https://youtu.be/Rzphu8B3rXQ

Хронологічний опис:
00:00 Тема роботи 
00:30 Головна сторінка 
00:35 Реєстрація користувача 
00:54 Вхід в аккаунт користувача 
1:14 Головна сторінка 
1:21 Налаштування аккаунту 
1:57 Встановлення денної норми води 
3:21 Створення нового запису про вживання води 
3:58 Редагування запису про вживання води 
3:58 Шкала прогресу випитої води від денної норми 
5:15 Видалення запису про споживання води 
5:38 Календар записів про вживання води за конкретний день місяця конкретного року 
6:18 Вихід з аккаунту
 
ДОДАТОК Б
Графічні матеріали

 
Рисунок Б.1 - UML діаграма прецедентів

 
Рисунок Б.2 - UML діаграма компонент

 
Рисунок Б.3 - Діаграма діяльності

 
Рисунок Б.4 – UML діаграма станів
