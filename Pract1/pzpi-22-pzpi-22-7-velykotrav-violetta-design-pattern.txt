МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ






ЗВІТ
З практичної роботи №1
З дисципліни «Архітектура програмного забезпечення»
На тему «Патерн проєктування Builder»







 
Виконала:
ст. гр. ПЗПІ-22-7
Великотрав В. Ю.
Перевірив:
 ст. викл. кафедри ПІ
 Сокорчук І. П. 







Харків 2025
1 Історія змін

№	Дата	Версія звіту	Опис змін та виправлень
1	25.05.2025	0.1	Створення роботи


2 Завдання

1.	Підготувати доповідь на тему: «Шаблон (патерн) проєктування ПЗ»
2.	(із книг: Ґамма, “ООП. Патерни проєктування”, GoF, крім патерна Singletone)
3.	Створити та оформити слайди презентації доповіді
4.	Створити та опублікувати на YouTube відеозапис доповіді
5.	Оформити та завантажити на dl.nure.ua звіт до виконаної роботи
6.	При потребі створити та налаштувати у GitHub обліковий запис для облікового запису студента в домені @nure.ua
7.	Створити для виконання завдань з дисципліни GitHub репозиторій iз вказаним на https://dl.nure.ua іменем та з головною гілкою main
8.	Створити у корені створеного репозиторію файл README.md з вказаним далі змістом та вказані далі директорії для окремих завдань
9.	Експортувати звіт у файл у простому текстововому форматі та завантажити цей файл у директорію Pract1 у репозиторії GitHub
10.	Завантажити у вказану далі піддиректорію увесь програмний код, який розглядається у доповіді ПЗ1


3 Опис виконаної роботи

У межах вивчення шаблонів (патернів) проєктування програмного забезпечення було обрано та детально проаналізовано патерн Builder (Будівельник), що належить до групи патернів створення (Creational patterns) відповідно до класифікації "Банди Чотирьох" (GoF).
Було виконано наступні етапи роботи:
1.	Вивчено теоретичну основу патерна Builder, включаючи його призначення, принципи роботи, структуру та класи, які бере участь у реалізації.
2.	Реалізовано приклад на мові програмування Java, що демонструє практичне використання Builder:
o	створено клас Product — об'єкт, що будується;
o	створено інтерфейс Builder та клас ConcreteBuilder, який реалізує кроки побудови;
o	додано клас Director, який керує процесом створення об'єкта;
o	написано головний клас Main з методом main(), де демонструється створення об'єкта через Builder.
3.	Проаналізовано переваги та недоліки патерна:
o	Переваги: ізоляція побудови від представлення, зручність роботи з багатьма параметрами, можливість створення різних представлень об'єкта.
o	Недоліки: збільшення кількості класів, складність для простих випадків.
4.	Підготовлено доповідь, що включає:
o	короткий опис патерна Builder,
o	UML-структуру,
o	приклад коду з поясненням,
o	аналіз сильних і слабких сторін.
Отримані результати показують ефективність патерна Builder у задачах, де потрібно поетапно та гнучко створювати складні об’єкти з різними конфігураціями.


4 Висновки
У результаті проведеної роботи було детально розглянуто патерн проєктування Builder (Будівельник), який є потужним інструментом для створення складних об'єктів з багатьма параметрами. Патерн дозволяє відокремити процес побудови об’єкта від його структури, що підвищує гнучкість та масштабованість програмного коду.

 
ДОДАТОК А

Відеозапис доповіді на Youtube: https://youtu.be/9ULY-Oo083E

00:00 Тема роботи 
00:13 Вступ 
00:57 Проблема, яку вирішує Builder 
1:24 Структура патерну 
1:56 Приклад реалізації патерну Builder на мові програмування Java 
4:14 Переваги та недоліки патерну Builder 
6:00 Застосування патерну 
6:28 Висновок
 
ДОДАТОК Б

 
Рисунок Б.1 – Титульний слайд

 
Рисунок Б.2 – Вступ

 
Рисунок Б.3 – проблема, яку вирішує патерн Будівельник (Builder)

 
Рисунок Б.4 – Структура патерну Будівельник (Builder)

 
Рисунок Б.5 – Приклад реалізації патерну Будівельник (Builder) на мові програмування Java

 
Рисунок Б.6 – Переваги та недоліки патерну Будівельник (Builder)

 
Рисунок Б.7 – Застосування патерну Будівельник (Builder)

 
Рисунок Б.8 – Висновок

 
ДОДАТОК В

1 class Product {
2     private String partA;
3     private String partB;
4 
5     public void setPartA(String partA) { this.partA = partA; }
6     public void setPartB(String partB) { this.partB = partB; }
7 
8     public String toString() {
9         return "Product with: " + partA + ", " + partB;
10     }
11 }
12 
13 interface Builder {
14     void buildPartA();
15     void buildPartB();
16     Product getResult();
17 }
18 
19 class ConcreteBuilder implements Builder {
20     private Product product = new Product();
21 
22     public void buildPartA() {
23         product.setPartA("Part A");
24     }
25 
26     public void buildPartB() {
27         product.setPartB("Part B");
28     }
29 
30     public Product getResult() {
31         return product;
32     }
33 }
34 
35 class Director {
36     public Product construct(Builder builder) {
37         builder.buildPartA();
38         builder.buildPartB();
39         return builder.getResult();
40     }
41 }
42 
43 public class Main {
44     public static void main(String[] args) {
45         Director director = new Director();
46         Builder builder = new ConcreteBuilder();
47         Product product = director.construct(builder);
48         System.out.println(product);
49     }
50 }
