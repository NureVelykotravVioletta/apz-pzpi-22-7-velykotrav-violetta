ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ



Кафедра програмної інженерії







Звіт
з лаборатороної роботи №2
з дисципліни «Архітектура програмного забезпечення»
на тему «РОЗРОБКА ПРОГРАМНОЇ АРХІТЕКТУРИ, СТВОРЕННЯ ТА 13 ВІДЛАГОДЖЕННЯ ПРОГРАМНОГО КОДУ СЕРВЕРНОЇ ЧАСТИНИ ПРОГРАМНОЇ СИСТЕМИ»






 
Виконала:
ст. гр. ПЗПІ-22-7
Великотрав В. Ю.

Перевірив:
ст. викл. каф. ПІ
Сокорчук І. П.
 

 






 

Харків 2025
1 Історія змін

№	Дата	Версія звіту	Опис змін та виправлень
1	01.06.2025	0.1	Створення роботи


2 ЗАВДАННЯ
Потрібно розробити серверну / back-end частину програмної системи.
1.	Проаналізуйте завдання (додаток В).
2.	Виконати контрольні завдання.
3.	Відкрити створений на попередній лабораторній роботі репозиторій GitHub.
4.	Створіть у репозиторії директорію Lab2 та текстовий файл з описом інженерних рішень у цій частині проєкту.
5.	Зафіксуйте кожну внесену зміну командою git commit з відповідним коментарем та фіксуйте цією командою усі наступні зміни у проекті.
6.	Створіть у директорії Task2 піддиректорію для програмного коду.
7.	Створіть програмний код, завантажте його у створену піддиректорію, зафіксуйте внесені у репозиторій зміни. Виконайте функціональне тестування створеного програмного коду та створіть відеозапис цього тестування тривалістю 7-10 хвилин з усними поясненнями процесу тестування.
8.	Завантажте створений відеозапис тестування YouTube канал для вашого облікового запису в домені @nure.ua
9.	Створіть для завантаженого запису його хронологічний опис.
10.	Оформіть звіт у форматі pdf та завантажте його на навчальну платформу https://dl.nure.ua/
11.	У коментарях до завантаженого звіту вкажіть посилання на відеозапис тестування у вашому каналі YouTube.

3 ОПИС ВИКОНАНОЇ РОБОТИ

3.1 ОПИС АРХІТЕКТУРИ СИСТЕМИ

Програмна система для відстеження щоденного вживання води побудована на основі трирівневої архітектури, що включає клієнтський рівень, рівень логіки додатку та рівень зберігання даних. Такий підхід забезпечує чіткий розподіл відповідальностей між компонентами, що полегшує супровід, масштабування та тестування системи.
Клієнтський рівень реалізований у вигляді веб- або мобільного застосунку, який взаємодіє із сервером через REST API. Користувачі за допомогою зручного інтерфейсу можуть створювати обліковий запис, авторизуватись, додавати або редагувати записи про споживання води, переглядати аналітику. Усі дії користувача ініціюють HTTP-запити до серверної частини, яка написана на Node.js.
Серверна частина є ядром системи і відповідає за обробку запитів, виконання бізнес-логіки, забезпечення автентифікації, авторизації та взаємодії з базою даних. Архітектура серверу побудована за принципами розділення обов’язків: маршрути (routes) обробляють вхідні запити, контролери (controllers) передають дані у сервіси, а сервіси виконують логіку роботи з моделями бази даних. Моделі базуються на бібліотеці Mongoose і представляють структуру колекцій MongoDB, таких як users, sessions, water_consumptions.
Безпека системи забезпечується за допомогою механізму JWT (JSON Web Token), який використовується для автентифікації користувачів. При вході в систему користувач отримує токен, який необхідно надавати при кожному запиті до захищених маршрутів. Ці токени зберігаються у спеціальній колекції sessions, що дозволяє керувати сесіями користувачів. Паролі користувачів хешуються перед збереженням у базі даних з використанням bcrypt, що гарантує безпечне зберігання облікових даних.
MongoDB, як документно-орієнтована база даних, виконує роль сховища всієї інформації про користувачів і їх водоспоживання. Сервер взаємодіє з нею через порт 27017. Це дозволяє ефективно зберігати та швидко обробляти великі обсяги даних.
Усі компоненти системи можуть бути розгорнуті у хмарному середовищі або на локальному сервері. Клієнтська частина може бути незалежною від серверної, що дозволяє легко змінювати інтерфейс або підтримувати декілька типів клієнтів (наприклад, веб і мобільний застосунок).
Загалом, така архітектура забезпечує модульність, масштабованість, безпечну роботу з даними та зручне розширення функціоналу у майбутньому.

3.2  ПОБУДОВА ДІАГРАМИ РОЗГОРТАННЯ

У системі відстеження споживання води, яку було реалізовано в рамках лабораторної роботи, діаграма розгортання складається з трьох основних вузлів:
•	Клієнтський пристрій (Client Device) — персональний комп’ютер, ноутбук або мобільний телефон користувача. На цьому пристрої запускається веб-браузер, через який користувач взаємодіє з системою. Інтерфейс користувача реалізований на базі технологій React та TypeScript. Веб-застосунок відправляє запити до серверної частини за допомогою HTTP-протоколу.
•	Сервер застосунку (Application Server) — серверний вузол, на якому розгорнута серверна логіка застосунку. Тут працює середовище виконання Node.js з реалізованим REST API. Сервер обробляє всі запити користувача, виконує перевірку автентичності, обробляє бізнес-логіку, взаємодіє з базою даних та повертає відповіді клієнтському інтерфейсу. Сервер приймає HTTP-запити на стандартному порту (наприклад, 3000 або 443 у випадку HTTPS).
•	Сервер бази даних (Database Server) — сервер, на якому розміщена база даних MongoDB. Цей вузол зберігає усі дані, пов’язані з користувачами, записами споживання води, налаштуваннями облікових записів тощо. Сервер обробляє запити на збереження, оновлення, читання і видалення даних, які надсилає до нього сервер додатку. Зв’язок між сервером додатку та MongoDB відбувається через порт 27017, який є стандартним для цього типу бази даних.

Усі вузли діаграми пов’язані між собою відповідними з’єднаннями, що ілюструють потік даних. Зв’язок між клієнтським пристроєм і сервером додатку здійснюється через інтернет або внутрішню мережу з використанням протоколу HTTP або HTTPS. Зв’язок між сервером застосунку та базою даних — внутрішній, на рівні серверного оточення, що гарантує швидкість і безпечний обмін інформацією.
На рисунку Б.1 у додатку Б наведена діаграма розгортання.

3.3 ОПИС АРХІТЕКТУРИ СЕРВЕРНОЇ ЧАСТИНИ
В рамках лабораторної роботи було реалізовано серверну частину системи, яка дозволяє виконувати авторизацію користувача, зберігати інформацію про його профіль, фіксувати записи про споживання води та отримувати відповідну статистику.
Серверна частина реалізована з використанням JavaScript-фреймворку Node.js, бази даних MongoDB та моделі REST API. Такий вибір технологій обумовлений зручністю створення масштабованих та гнучких бекенд-сервісів, що швидко обробляють запити клієнтів.

3.4 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

У межах лабораторної роботи було побудовано діаграму прецедентів для вебсистеми моніторингу споживання води. 
В якості єдиного актора на діаграмі виступає Користувач. Це фізична особа, яка взаємодіє з вебінтерфейсом через браузер і здійснює вхід до системи, додає або переглядає власні записи, редагує їх тощо. Актор розміщується за межами системи й пов’язується з відповідними прецедентами асоціативними зв’язками.
У системі були виділені наступні основні прецеденти (сценарії використання), кожен з яких відповідає певному виду функціональної активності користувача:
•	Реєстрація в системі – створення нового облікового запису шляхом введення особистих даних.
•	Вхід до системи – автентифікація за допомогою електронної пошти та пароля.
•	Додавання запису споживання води – внесення даних про кількість випитої води.
•	Вихід із системи – завершення сесії користувача.
•	Перегляд конкретного запису 
•	Редагування запису про споживання води
•	Завантаження/зміна фото профілю
•	Перегляд усіх записів про споживання води
•	Перегляд інформації про профіль користувача
•	Оновлення інформаціх профілю користувача
•	Перегляд статистики споживання води за рік/місяць

Усі прецеденти розміщено всередині системної області, яка позначає межі інформаційної системи. Вони пов’язані з актором через прямі асоціативні зв’язки. 
На рисунку Б.2 у додатку Б наведена UML діаграми прецедентів.



3.5 ПОБУДОВА ER-ДІАГРАМИ

У межах розробки системи моніторингу споживання води було створено ER-діаграму, що відображає основні об’єкти даних, з якими працює система. У центрі діаграми знаходяться три головні сутності:
1.	User (Користувач) – сутність, що представляє зареєстрованого користувача системи. Атрибути включають:
•	id – унікальний ідентифікатор користувача (первинний ключ),
•	name – ім’я користувача,
•	email – адреса електронної пошти,
•	password – хешований пароль.
•	dailyWaterIntake – встановлена кількість спожитоъ води в день
2.	WaterConsumptions (Запис про споживання води) – сутність, що зберігає інформацію про облік води користувачем. Атрибути:
•	id – унікальний ідентифікатор запису (первинний ключ),
•	user_id – зовнішній ключ, який пов’язує запис із певним користувачем,
•	amount – запис про одне споживання води (в мілілітрах),
•	date – дата, до якої належить запис про вживання води.
3.	Session (Сессія) – відображає авторизацію користувача в системі :
•	id – унікальний ідентифікатор сессії (первинний ключ),,
•	user_id - зовнішній ключ, який пов’язує сессію із певним користувачем,
•	accessToken– токен доступу,
•	accessTokenValidUntil– дата закінчення дії токену доступу
Між сутностями встановлено такі зв’язки:
•	User —< WaterConsumptions (один-до-багатьох): один користувач може мати багато записів про споживання води. Цей зв’язок реалізовано через зовнішній ключ user_id у таблиці WaterConsumptions.
•	User —< Session (один-до-багатьох): кожен користувач має окрему сессію.
На рисунку Б.3 у додатку Б наведена ER-діаграма.

3.6 СПЕЦИФІКАЦІЯ REST

Таблиця 3.5.1 - Специфікації API
Метод	Шлях	Опис
POST	
/auth/register
Реєстрація користувача
POST	/auth/login	Авторизація
POST	/auth/logout	Вихід користувача
GET	/user/info	Отримання інформації користувача
PATCH	/user/updateInfo	Оновлення інформації користувача
PATCH	/user/userPhoto	Завантаження фото користувача
PATCH	/user/newDailyWaterIntake	Встановлення добової норми води
POST	/water	Запис нового споживання води
GET	/water	Отримання всіх записів про споживання води
GET	/water/{id}	Отримання конкретного запису про споживання води
PATCH	/water/{id}	Оновлення конкретного запису про споживання води
GET	/water/{month}/{year}	Записи за місяць та рік
DELETE	/water/{id}	Видалення конкретного запису про споживання води

3.7 ПОБУДОВА ДІАГРАМИ ДІЯЛЬНОСТІ

Побудова діаграми діяльності системи для обліку споживання води передбачає деталізоване відображення всіх основних дій, які може виконувати користувач у межах платформи, а також логіки переходів між цими діями. Ця діаграма охоплює як взаємодію з системою у процесі автентифікації, так і подальші функціональні можливості, пов’язані з персональним обліком води.
Процес починається з дії «Запуск програми», після чого користувач має змогу обрати один із двох сценаріїв: «Реєстрація» або «Вхід до системи». У разі реєстрації система запитує персональні дані користувача: ім’я, електронну пошту, пароль, а також бажану добову норму споживання води. Після успішної реєстрації користувач автоматично переходить до авторизованої сесії.
У сценарії входу користувач вводить облікові дані — електронну пошту та пароль. У разі успішної авторизації створюється сесія, а користувач отримує доступ до головного функціоналу.
Усередині авторизованої частини система надає кілька варіантів дій. Користувач може переглядати та оновлювати свою персональну інформацію, включно з можливістю змінити ім’я, email, завантажити фотографію або скоригувати добову норму води.
Окремий блок дій стосується обліку води. Користувач може створювати нові записи про споживання води, вказуючи кількість у мілілітрах. Усі ці записи можна переглядати в загальному списку, відфільтровувати за місяцем і роком, переглядати деталі окремого запису, оновлювати або видаляти будь-який із них.
Завершується діаграма діяльності можливістю «Вихід із системи», що передбачає завершення сесії користувача і повернення до стартового екрану з вибором між реєстрацією та входом.
Таким чином, діаграма діяльності демонструє логічну послідовність взаємодії користувача з усіма доступними функціями системи, а також забезпечує цілісне бачення архітектури користувацьких сценаріїв — від входу в систему до повного управління своїм профілем і даними про споживання води.

ВИСНОВКИ 
У цій лабораторній роботі було розроблено архітектуру веб-застосунку для обліку споживання води. Створено UML-діаграми (прецедентів, ER, розгортання, діяльності), що відображають логіку взаємодії користувача з системою та структуру даних. Описано основні сутності: користувач, сесія, запис споживання. Архітектура побудована за REST-принципами, що забезпечує гнучкість, безпеку та масштабованість. Отримані результати підтверджують важливість моделювання для ефективної розробки і документування програмного продукту.
 
ДОДАТОК А

Відеозапис презентації результатів лабораторної роботи: https://youtu.be/FDc77qZqsEs

Хронологічний опис:
00:00 Тема роботи 
00:20 Структура проєкту 
1:10 Файл підключення до бази даних 
1:26 База даних 
2:58 Маршрути API 
4:36 Демонстрація роботи API за допомогою програми Postman

 
ДОДАТОК Б
Графічні матеріали


 
Рисунок Б.1 - Діаграма розгортання

 
Рисунок Б.2 - UML діаграма прецедентів

 
Рисунок Б.3 - ER-діаграма

 
Рисунок Б.4 - Діаграма діяльності
